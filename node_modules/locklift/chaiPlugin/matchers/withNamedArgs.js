"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.supportWithNamedArgs = void 0;
const utils_1 = require("../utils");
/**
 * Used for testing the arguments of events or custom errors, naming the arguments.
 * Can test the subset of all arguments.
 * Should be used after .emit or .call matcher.
 */
function supportWithNamedArgs(Assertion, utils) {
    Assertion.addMethod("withNamedArgs", function (expectedArgs, message) {
        const events = utils.flag(this, "messages");
        const firstEvent = events[0];
        if (!firstEvent.decodedMsg?.params) {
            throw new Error(`Event ${firstEvent.decodedMsg?.method} doesn't have params`);
        }
        const { eventParamsWithUpdatedAddress, expectedArgsWithUpdatedAddress } = {
            eventParamsWithUpdatedAddress: (0, utils_1.mapAddressesToString)(firstEvent.decodedMsg.params),
            expectedArgsWithUpdatedAddress: (0, utils_1.mapAddressesToString)(expectedArgs),
        };
        const partialEventArgs = (0, utils_1.objectIntersection)(eventParamsWithUpdatedAddress, expectedArgsWithUpdatedAddress);
        new Assertion(partialEventArgs).to.be.deep.equal(expectedArgsWithUpdatedAddress, message);
        return this;
    });
}
exports.supportWithNamedArgs = supportWithNamedArgs;
