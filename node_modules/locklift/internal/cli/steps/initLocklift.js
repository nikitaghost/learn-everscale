"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initLockliftStep = void 0;
const index_1 = require("../../../index");
const path_1 = __importDefault(require("path"));
const tsNode = __importStar(require("ts-node"));
const initLockliftStep = async (config, options) => {
    // Initialize Locklift
    //@ts-ignore
    global.locklift = await index_1.Locklift.setup(config, options.network);
    global.__dirname = __dirname;
    process.env.TS_CONFIG_PATHS = path_1.default.resolve(process.cwd(), "tsconfig.json");
    if (process.env.TS_CONFIG_PATHS) {
        require("tsconfig-paths/register");
    }
    await tsNode.register({
        project: process.env.TS_CONFIG_PATHS,
        files: false,
        transpileOnly: true,
    });
    //@ts-ignore
    return global.locklift;
    // require(path.resolve(process.cwd(), options.script));
};
exports.initLockliftStep = initLockliftStep;
