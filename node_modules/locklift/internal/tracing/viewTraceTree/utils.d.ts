import { BalanceChangeInfoStorage, MsgError, TraceType, ViewTraceTree, ViewTraceTreeWithTotalFee } from "../types";
import { ContractWithName } from "../../../types";
import BigNumber from "bignumber.js";
export declare const mapType: Record<TraceType, string>;
export declare const colors: Record<"contractName" | "methodName" | "paramsKey" | "error", (param?: string) => string>;
export declare const applyTotalFees: (viewTrace: ViewTraceTree) => ViewTraceTreeWithTotalFee;
export declare const calculateTotalFees: (traceTree: ViewTraceTreeWithTotalFee) => BigNumber;
export declare const printer: ({ type, decodedMsg, contract, totalFees, sentValue, value, balanceChange, error, }: Pick<ViewTraceTreeWithTotalFee, "type" | "decodedMsg" | "msg" | "contract" | "totalFees" | "sentValue" | "value" | "balanceChange" | "error">, { contracts }: {
    contracts: Array<ContractWithName | undefined>;
}) => string;
export declare type BalanceChangingInfo = {
    totalReceive: BigNumber;
    totalSent: BigNumber;
    balanceDiff: BigNumber;
};
declare type BalanceChangeInfo = Record<string, Omit<BalanceChangingInfo, "balanceDiff">>;
export declare const getBalanceChangingInfo: (viewTrace: ViewTraceTreeWithTotalFee, accumulator?: BalanceChangeInfo) => BalanceChangeInfo;
export declare const getBalanceDiff: (balanceChangeInfo: BalanceChangeInfo) => BalanceChangeInfoStorage;
declare type ErrorInfoStorage = Record<string, Array<MsgError>>;
export declare const getErrorsInfo: (viewTrace: ViewTraceTreeWithTotalFee, accumulator?: ErrorInfoStorage) => ErrorInfoStorage;
export {};
